---
title: "Les méthodes AGILES"
date: "2024-09-13"
sidebar_label: "Méthodes AGILES"
sidebar_position: 4
---

# Chapitre 3 : Agilité

## Gestion de projet

Provenance de l'*Agilité* :

* Agile manufacturing/Lean manufacturing dans les années 80
* Années 2000 Méthode SCRUM

#### 4 Valeurs AGILE :

* Individus et interactions + que les processus et les outils
* Logiciels opérationnels + qu'une doc ehaustive
* Collaboration avec les clients + que les négo contractuelles
* Adapatation au changement + que suivi plan

#### 12 principes AGILE :

* Livrer de la valeur au client
* Intégrer les demandes de changement
* Livrer fréquemment une version opérationnelle
* Assurer une coopération entre clients et équipe
* Réaliser les projets avec des personnes motivées
* Privilégier le dialogue en face à face
* Mesurer l'avancement sur la base d'un produit opérationnel
* Faire avancer le projet à un rythme soutenable et constant
* Controler l'excellence technique et la conception
* Minimiser la quantité de travail inutile
* Construire le projet avec des équipes auto-organisées
* Améliorer constamment l'efficacité de l'équipe

**Autres méthodes AGILE** :
* Extreme Programming (XP)
* Feature Driven Development (FDD)
* Lean Software Development (LSD)
* Rational Unified Process (RUP)
* Agile Unified Process : Agile UP (repose sur le TDD)
* Disciplined Agile Delivery (DAD)

### XP

**5 Valeurs** :
* Communication
* Simplicité
* Feedback réguliers
* Courage : accepter faiblesse et transparence
* Respect : au sein de l'équipe, client/équipe

**5 règles** :
1. Planification
2. Gestion : réunions régulières
3. Codage : amélioration continue
4. Conception
5. Expérimentation, Tests

**12 pratiques** :
1. Feedback à petite échelle :
   * Pair programming,
   * Planning game,
   * TDD (Test Driven Dev),
   * Whole Team
2. Processus continu :
   * Intégration continue,
   * Refactoring ,
   * Small releases
3. Compréhension partagée :
   * Coding standards,
   * Collective code ownership,
   * Simple Design,
   * System Metaphor
4. Bien-etre des programmeurs
   
**Organisation**: client / développeurs / coach (= scrum master) / tracker

### Feature Driven Development (FDD)

**Caractéristiques** :
* Itératif
* Incrémental
* Cycles courts

**5 process**: 
1. Modèle global
2. Listes des fonctionnalités
3. Plannifier : prioriser les fonctionnalités
4. Conception
5. Construction : developpement, tests, intégration, documentation
  
**Organisation** :
* Grosse équipe / gros projet
* Programmeur principal : leader d'une équipe de développeurs et échange régulièrement avec les utilisateurs
* Experts en domaine, experts techniques
* Connaissance métier (peu de documentation)

*Les +*: 
* Peu de réunions
* Centrée sur l'utilisateur (=client)
* Adapatable aux gros projets à long terme
* Debuggage grâce aux cycles courts

*Les -*:
* Dépendance au programmeur principal qui se doit de rester en contact avec les utilisateurs
* Propriété individuelle du code du fait du découpage en équipe de développeurs

### Lean Software Development

*Caractéristiques* :
* Minimiser les gaspillages et les élimniner

*7 principes* :
1. **Elimnate Waste** : éviter la surproduction, exigences claires
2. **Build in quality** : pair programming, développement piloté par les tests, développement incrémental, feedbacks fréquents, réduire les temps d'attente, automatiser les tâches
3. **Amplify learning** : code reviews, pair programming, code comments, documentation claire, session de partage
4. **Defer decision** : pas de planification excessive, ne pas s'engager sans compréhnesion complète, analyse permanente
5. **Deliver fast** : solution simple, pas de process excessif, amélioration progressive en focntion des feedbacks, anticiper et résoudre blocages
6. **Respect people** : communication proactive, encourager les conflits sains
7. **Optimize the whole** : restructuration des équipes, identification de la circulation de la valeur dans l'équipe, proximité des membres, fournir tous les outils nécessaires

### Disciplined Agile Delivery (DAD)

**Objectifs**:
* Livraison incrémentale : ajustements réguliers, besoins changeants
* Gestion des risques : pilotage par les risques
* Coordination des activités
* Optimisation des flux de travail
* Améliorer la qualité
* Environnement sûre

**Cyle de Développement**:
1. *Inception*
2. *Construction* : l'équipe utilise la méthode qui lui parait la plus adaptée (SCRUM, Kanban, AL, LSD, XP,UP, etc)
3. *Transition*

**Organisation**: 
* Rôles primaires : Product Owner - Team Leader - Team Member - Architecture Member + Stakeholder 
* Rôles secondaires : Specialists - Experts - Testeur - Intégrateur

UP et DAD font partie de l'*agilité* mais sont des formes de gestion de projet **hybrides** : on réfléchit avant d'agir, GEP plus classique, framework assez lourd (projets + complexes, plus lourds et donc adaptés aux plus grandes entreprises)


### SCRUM

#### Principaux éceuils de SCRUM

* Manque de vision claire : démotivation/peu fédérateur
* Problème de livraison incrémentale et long terme : bases peu solides et déconnectées, fragmentation, problème de compatibilité, lourdeur de développement
* Niveau de collaboration quasi impossible à maintenir : client (=Product Owner) très investi et pilote du projet --> très difficile à maintenir
* Impossible de prédire les ressources/efforts
* Pas de fin... product backlogs toujouts existants
* Documentation souvent baclée/absente
* Conception parfois douteuse
* Hypocrisie des sprints techniques qui n'existe pas : dette technique
* Mesure impossible : acceptation d'une forme de flou pour se concentrer sur le résultat et peu de contrôle